generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  image                Json?
  full_name            String                @db.VarChar(255)
  role                 String?               @db.VarChar(50)
  birth                DateTime?             @db.Date
  password             String                @db.VarChar(255)
  phone                String                @unique @db.VarChar(20)
  email                String                @unique @db.VarChar(255)
  created_at           DateTime?             @default(now()) @db.Timestamp(6)
  updated_at           DateTime?             @default(now()) @db.Timestamp(6)
  merchants            merchant[]
  orders               order[]
  payment_transactions payment_transaction[]
}

/// ============ merchant ============
model merchant {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String                @db.Uuid
  merchant_name        String
  location             Json?
  phone                String?               @db.VarChar(20)
  email                String?               @db.VarChar(100)
  profile_image        Json?
  cover_image          Json?
  time_open            Json?
  cuisine              String?               @db.VarChar(255)
  categories           category[]
  menu_item            menu_item[]
  user                 users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_merchant_user")
  option               option[]
  orders               order[]
  payment_transactions payment_transaction[]
}

/// ============ category ============
model category {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  merchant_id   String      @db.Uuid
  category_name String
  merchant      merchant    @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
  menu_item     menu_item[]
}

/// ============ menu_item ============
model menu_item {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  merchant_id      String             @db.Uuid
  category_id      String?            @db.Uuid
  name_item        String
  likes            BigInt             @default(0)
  price            BigInt
  description      String?
  sold_count       BigInt             @default(0)
  image_item       Json?
  status           Boolean            @default(true)
  category         category?          @relation(fields: [category_id], references: [id])
  merchant         merchant           @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
  menu_item_option menu_item_option[]
  order_items      order_item[]
}

/// ============ option ============
model option {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  merchant_id      String             @db.Uuid
  option_name      String
  multi_select     Boolean            @default(false)
  require_select   Boolean            @default(false)
  number_select    BigInt             @default(0)
  menu_item_option menu_item_option[]
  merchant         merchant           @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
  option_item      option_item[]
}

/// ============ option_item ============
model option_item {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  option_id          String              @db.Uuid
  option_item_name   String
  status             Boolean             @default(true)
  status_select      Boolean             @default(false)
  option             option              @relation(fields: [option_id], references: [id], onDelete: Cascade)
  order_item_options order_item_option[]
}

/// ============ menu_item_option (N-N) ============
model menu_item_option {
  option_id    String    @db.Uuid
  menu_item_id String    @db.Uuid
  menu_item    menu_item @relation(fields: [menu_item_id], references: [id], onDelete: Cascade)
  option       option    @relation(fields: [option_id], references: [id], onDelete: Cascade)

  @@id([option_id, menu_item_id])
}

model order {
  id               String                @id @default(uuid()) @db.Uuid
  merchant_id      String                @db.Uuid
  user_id          String                @db.Uuid
  full_name        String                @db.VarChar(255)
  phone            String?               @db.VarChar(20)
  delivery_address String?
  delivery_fee     BigInt?               @default(0)
  note             String?
  total_amount     BigInt
  created_at       DateTime?             @default(now()) @db.Timestamp(6)
  updated_at       DateTime?             @default(now()) @updatedAt @db.Timestamp(6)
  status           String?               @default("pending") @db.VarChar(50)
  status_payment   String?               @default("unpaid") @db.VarChar(50)
  payment_method   String?               @default("COD") @db.VarChar(50)
  merchant         merchant              @relation(fields: [merchant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_merchant")
  user             users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_user")
  items            order_item[]
  payments         payment_transaction[]
}

model order_item {
  id           String              @id @default(uuid()) @db.Uuid
  order_id     String              @db.Uuid
  menu_item_id String              @db.Uuid
  note         String?
  quantity     BigInt
  price        BigInt
  menu_item    menu_item           @relation(fields: [menu_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_item_menu")
  order        order               @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_item_order")
  options      order_item_option[]
}

model order_item_option {
  order_item_id  String      @db.Uuid
  option_item_id String      @db.Uuid
  option_item    option_item @relation(fields: [option_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_item_option_option_item")
  order_item     order_item  @relation(fields: [order_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_item_option_order_item")

  @@id([order_item_id, option_item_id])
}

model payment_transaction {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String        @db.Uuid
  merchant_id    String        @db.Uuid
  order_id       String?       @db.Uuid
  amount         BigInt
  currency       String        @default("VND") @db.VarChar(10)
  txn_ref        String        @db.VarChar(64)
  transaction_no String?       @db.VarChar(64)
  payment_method String        @db.VarChar(32)
  status         PaymentStatus @default(PENDING)
  response_code  String?       @db.VarChar(8)
  bank_code      String?       @db.VarChar(32)
  pay_date       String?       @db.VarChar(14)
  tmn_code       String?       @db.VarChar(32)
  raw_payload    Json?
  created_at     DateTime      @default(now()) @db.Timestamptz(6)
  updated_at     DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  merchant       merchant      @relation(fields: [merchant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order          order?        @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([order_id, txn_ref], map: "uq_payment_txn_ref")
  @@index([order_id], map: "idx_payment_order")
  @@index([status], map: "idx_payment_status")
  @@index([user_id], map: "idx_payment_user")
}


enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
  REFUNDED

  @@map("payment_status")
}

enum order_status {
  PENDING
  CONFIRMED
  PREPARING
  DELIVERING
  COMPLETED
  CANCELED
}

enum payment_method {
  COD
  VNPAY
  MOMO
  STRIPE
}
