import { pool } from "../db.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";


// ====================== ƒêƒÉng nh·∫≠p ======================
export async function loginCustomer(req, res) {
  
  const { identifier, password } = req.body;

  // Ki·ªÉm tra ƒë·∫ßu v√†o
  if (!identifier || !password) {
    return res
      .status(400)
      .json({ error: "Vui l√≤ng nh·∫≠p ƒë·ªß email/sƒët v√† m·∫≠t kh·∫©u" });
  }

  try {
    // T√¨m user b·∫±ng email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i
    const result = await pool.query(
      "SELECT * FROM users WHERE email = $1 OR phone = $1 LIMIT 1",
      [identifier]
    );

    if (result.rows.length === 0) {
      return res
        .status(404)
        .json({ error: "Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i kh√¥ng t·ªìn t·∫°i" });
    }

    const user = result.rows[0];

    // So s√°nh m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ error: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c" });
    }

    // ‚úÖ T·∫°o token sau khi x√°c th·ª±c xong
    const token = jwt.sign(
      { id: user.id, role: user.role },
      process.env.JWT_SECRET || "secret_key",
      { expiresIn: "7d" }
    );

    // ‚úÖ Tr·∫£ v·ªÅ ph·∫£n h·ªìi cho FE **sau khi x√°c th·ª±c xong**
    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      token,
      user: {
        id: user.id,
        full_name: user.full_name,
        email: user.email,
        phone: user.phone,
        role: user.role,
      },
    });
  } catch (error) {
    console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
    res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
  }
}


// ====================== L·∫§Y TH√îNG TIN USER ======================
export async function getUserInfo(req, res) {
  try {
    const authHeader = req.headers.authorization;

    if (!authHeader) {
      return res.status(401).json({ error: "Thi·∫øu token x√°c th·ª±c" });
    }

    const token = authHeader.split(" ")[1];
    if (!token) {
      return res.status(401).json({ error: "Token kh√¥ng h·ª£p l·ªá" });
    }

    // ‚úÖ Gi·∫£i m√£ token
    const decoded = jwt.verify(token, process.env.JWT_SECRET || "secret_key");

    // üì• L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ DB
    const result = await pool.query(
      "SELECT id, full_name, email, phone, role FROM users WHERE id = $1",
      [decoded.id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.status(200).json({
      message: "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng",
      user: result.rows[0],
    });
  } catch (error) {
    console.error("L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    res.status(401).json({ error: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
  }
}